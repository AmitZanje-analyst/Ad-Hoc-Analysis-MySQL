
♾️  Provide the list of markets in which customer "Atliq Exclusive" operates its business in the APAC region. */

SELECT DISTINCT(market) FROM dim_customer
WHERE customer LIKE '%Atliq%Exclusive%';

♾️ What is the percentage of unique product increase in 2021 vs. 2020? Thefinal output contains these fields,
unique_products_2020
unique_products_2021
percentage_chg*/

WITH cte1 AS (
		SELECT COUNT(DISTINCT s.product_code) AS unique_products_2020
		FROM  fact_sales_monthly s
		WHERE fiscal_year=2020),
cte2 AS (
		SELECT COUNT(DISTINCT s.product_code) AS unique_products_2021
		FROM  fact_sales_monthly s
		WHERE fiscal_year=2021)
SELECT * ,
	ROUND((unique_products_2021 - unique_products_2020) *100/ unique_products_2020,2) AS pct_change
FROM cte1
CROSS JOIN cte2;


♾️ Provide a report with all the unique product counts for each segment and sort them in descending order of product counts. The final output contains2 fields,
segment
product_count*/

SELECT segment, COUNT(DISTINCT product_code) AS product_count
FROM dim_product
GROUP BY segment
ORDER BY product_count DESC;

♾️ Follow-up: Which segment had the most increase in unique products in 2021 vs 2020? The final output contains these fields,
segment
product_count_2020
product_count_2021
difference*/

WITH cte1 AS (
		SELECT p.segment,
				COUNT(DISTINCT s.product_code) AS unique_products_2020
		FROM  fact_sales_monthly s
        JOIN dim_product p 
        ON p.product_code=s.product_code
		WHERE fiscal_year=2020
        GROUP BY 1),
 cte2 AS (       
		SELECT p.segment,
				COUNT(DISTINCT s.product_code) AS unique_products_2021
		FROM  fact_sales_monthly s
        JOIN dim_product p 
        ON p.product_code=s.product_code
		WHERE fiscal_year=2021
        GROUP BY 1)
SELECT cte1.segment,unique_products_2020, unique_products_2021,
	(unique_products_2021-unique_products_2020) AS difference
FROM cte1
JOIN cte2
ON cte1.segment=cte2.segment
ORDER BY diffrence DESC;

♾️Get the products that have the highest and lowest manufacturing costs.The final output should contain these fields,
product_code
product
manufacturing_cost */


SELECT c.product_code, p.product, manufacturing_cost
FROM fact_manufacturing_cost c
JOIN dim_product p 
ON c.product_code=p.product_code
WHERE manufacturing_cost = (SELECT MAX(manufacturing_cost) FROM fact_manufacturing_cost)
	or manufacturing_cost = (SELECT MIN(manufacturing_cost) FROM fact_manufacturing_cost)
ORDER BY manufacturing_cost DESC ;

♾️ Generate a report which contains the top 5 customers who received an average high pre_invoice_discount_pct for the fiscal year 2021 and in the Indian market.
The final output contains these fields,
customer_code
customer
average_discount_percentage*/
SET sql_mode='';
SELECT pre.customer_code,
		c.customer,
	ROUND(AVG (pre_invoice_discount_pct)*100,2)  AS average_discount_percentage
FROM fact_pre_invoice_deductions pre 
JOIN dim_customer c 
ON pre.customer_code=c.customer_code 
WHERE c.market= 'India'  and fiscal_year= 2021 
GROUP BY pre.customer_code,c.customer
ORDER BY AVG (pre_invoice_discount_pct) DESC
LIMIT 5;

♾️ Get the complete report of the Gross sales amount for the customer “Atliq Exclusive” for each month. 
This analysis helps to get an idea of low andhigh-performing months and take strategic decisions.
The final report contains these columns:
Month
Year
Gross sales Amount */

SELECT CONCAT(LEFT(monthname(date),3),'-', year(date)) AS 'Month' ,
		s.fiscal_year,
        ROUND(SUM(sold_quantity *gross_price)/1000000,2) AS  Gross_sales_Amount_mln
FROM fact_sales_monthly s 
JOIN fact_gross_price p 
ON s.product_code=p.product_code AND s.fiscal_year=p.fiscal_year
JOIN dim_customer c
USING (customer_code)
WHERE customer = 'Atliq Exclusive'
GROUP BY s.fiscal_year,month(date)
ORDER BY  s.fiscal_year,year(date);

♾️In which quarter of 2020, got the maximum total_sold_quantity? The final output contains these fields sorted by the
total_sold_quantity,
Quarter
total_sold_quantity */

SELECT
	CASE   WHEN month(date) IN (9,10,11) THEN 'Q1'
		   WHEN month(date) IN (12,1,2) THEN 'Q2'
		   WHEN month(date) IN (3,4,5) THEN 'Q3'
           WHEN month(date) IN (6,7,8) THEN 'Q4'
    END AS 'Quarter' ,   
	ROUND(SUM(sold_quantity)/1000000,2) AS total_sold_quantity_mln
FROM fact_sales_monthly    
WHERE fiscal_year = 2020   
GROUP BY Quarter
ORDER BY total_sold_quantity_mln DESC  ;

♾️ Which channel helped to bring more gross sales in the fiscal year 2021 and the percentage of contribution? The final output contains these fields,
channel
gross_sales_mln
percentage*/

WITH cte1 AS (
SELECT c.channel, 
	ROUND(SUM(sold_quantity *gross_price)/1000000,2) AS  gross_sales_mln
FROM fact_sales_monthly s 
JOIN fact_gross_price p 
ON  s.product_code=p.product_code AND s.fiscal_year=p.fiscal_year
JOIN dim_customer c
ON s.customer_code=c.customer_code
WHERE s.fiscal_year= 2021
GROUP BY c.channel   
)
SELECT *,
        ROUND(gross_sales_mln *100/ SUM(gross_sales_mln) OVER(),2) AS percentage
FROM cte1 
ORDER BY percentage DESC ;       
       
       
♾️ Get the Top 3 products in each division that have a high total_sold_quantity in the fiscal_year 2021? The final output contains these fields,
division
product_code
product
total_sold_quantity
rank_order   */

-- without variant column
WITH cte1 AS (
SELECT p.division,s.product_code,p.product,
	SUM(s.sold_quantity) AS total_sold_quantity
FROM fact_sales_monthly s
JOIN dim_product p 
ON s.product_code=p.product_code   
WHERE s.fiscal_year= 2021
GROUP BY p.division,s.product_code,p.product
 ),
 cte2 AS (
 SELECT *,
DENSE_RANK () OVER(PARTITION BY division ORDER BY total_sold_quantity DESC) AS rank_order
FROM cte1)
 SELECT * FROM cte2 
 WHERE rank_order <=3;

-- with variant column
WITH cte1 AS (
SELECT p.division,s.product_code,p.product,p.variant,
	SUM(s.sold_quantity) AS total_sold_quantity
FROM fact_sales_monthly s
JOIN dim_product p 
ON s.product_code=p.product_code   
WHERE s.fiscal_year= 2021
GROUP BY p.division,s.product_code,p.product,p.variant
 ),
 cte2 AS (
 SELECT *,
DENSE_RANK () OVER(PARTITION BY division ORDER BY total_sold_quantity DESC) AS rank_order
FROM cte1)
 SELECT * FROM cte2 
 WHERE rank_order <=3



